generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailVerified Boolean @default(false)
  optSecret     String?

  videos    Video[]          @relation("UserVideos")
  favorites FavoriteVideos[] @relation("UserFavorites")
  Comment   Comment[]

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Video {
  id           String   @id @default(uuid())
  videoPath    String
  originalName String
  title        String   @default("")
  description  String?
  thumbnail    String
  duration     Int?
  isPublic     Boolean  @default(true)
  views        Int      @default(0)
  fileSize     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user      User             @relation("UserVideos", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  favorites FavoriteVideos[] @relation("VideoFavorites")

  Comment Comment[]
}

model FavoriteVideos {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user    User   @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  video   Video  @relation("VideoFavorites", fields: [videoId], references: [id], onDelete: Cascade)
  videoId String

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
}
